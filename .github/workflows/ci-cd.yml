name: build push and deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  AWS_ROLE: ${{ secrets.AWS_ACTION_ROLE}}
  ECR_REPO_NAME: dev
  IMAGE_TAG: ${{ github.run_number}}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: clone repo
        uses: actions/checkout@v3
      - name: Aws creds config
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE }} # OIDC
      - name: Login to ecr
        uses: aws-actions/amazon-ecr-login@v2
        id: ecr-login

      - name: Scan file system with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          format: "table"
          exit-code: '0'
          severity: "CRITICAL,HIGH"
          ignore-unfixed: true
         # vuln-type: 'os,library'

      - name: build tag and push image
        id: build
        run: |
            docker build -t ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG}} .
      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG}}"
          #scan-type: "fs"
          format: "table"
          exit-code: '0'
          severity: "CRITICAL,HIGH"
          ignore-unfixed: true
         # vuln-type: 'os,library'
      
      - name: build tag and push image
        id: push
        run: |
            docker push ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG}}
        
      - name: Store image in github environment
        run: echo "Image=${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG}}" >> $GITHUB_ENV
      
  deploy:
      runs-on: ubuntu-latest
      needs: build
      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4.1.0
          with:
            aws-region: ${{ env.AWS_REGION }}
            role-to-assume: ${{ env.AWS_ROLE }}

        - name: Deploy to ECS
          uses: aws-actions/amazon-ecs-deploy-task-definition@v1
          with:
            cluster: nginx-cluster
            service: nginx-service
            image: ${{ needs.build.outputs.image }}
            task-definition: nginx-task
            wait-for-service-stability: true


